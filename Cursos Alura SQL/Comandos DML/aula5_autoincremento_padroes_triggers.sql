/* PODEMOS TER APENAS UM CAMPO DE AUTOINCREMENTO POR TABELA*/ 
CREATE TABLE TAB_IDENTITY (
	ID INT AUTO_INCREMENT,
    DESCRITOR VARCHAR(20),
    PRIMARY KEY(ID)			-- O auto incremento deve ser sempre chave primária da tabela
);

INSERT INTO TAB_IDENTITY(DESCRITOR)
VALUES ('CLIENTE1');

SELECT * FROM TAB_IDENTITY;

INSERT INTO TAB_IDENTITY(DESCRITOR)
VALUES ('CLIENTE1'), ('CLIENTE2'), ('CLIENTE3'), ('CLIENTE4');

INSERT INTO TAB_IDENTITY(DESCRITOR)
VALUES ('CLIENTE5');

DELETE FROM TAB_IDENTITY WHERE ID = 5;

INSERT INTO TAB_IDENTITY(DESCRITOR)
VALUES ('CLIENTE6');

INSERT INTO TAB_IDENTITY(ID, DESCRITOR)
VALUES (null, 'CLIENTE7');

INSERT INTO TAB_IDENTITY(ID, DESCRITOR)
VALUES (100, 'CLIENTE8');

-- Atividade
CREATE TABLE TAB_IDENTITY2 (ID INT AUTO_INCREMENT, DESCRITOR VARCHAR(20), PRIMARY KEY(ID));
INSERT INTO TAB_IDENTITY2 (DESCRITOR) VALUES ('CLIENTE1');
INSERT INTO TAB_IDENTITY2 (DESCRITOR) VALUES ('CLIENTE2');
INSERT INTO TAB_IDENTITY2 (DESCRITOR) VALUES ('CLIENTE3');
INSERT INTO TAB_IDENTITY2 (ID, DESCRITOR) VALUES (NULL, 'CLIENTE4');
DELETE FROM TAB_IDENTITY2 WHERE ID = 3;
INSERT INTO TAB_IDENTITY2 (ID, DESCRITOR) VALUES (NULL, 'CLIENTE6');
INSERT INTO TAB_IDENTITY2 (ID, DESCRITOR) VALUES (NULL, 'CLIENTE7');
DELETE FROM TAB_IDENTITY2 WHERE ID = 2;
SELECT * FROM TAB_IDENTITY2;

/* DEFININDO PADRÕES PARA OS CAMPOS*/
USE VENDAS_SUCOS; 
CREATE TABLE TAB_PADRAO
(ID INT AUTO_INCREMENT,
DESCRITOR VARCHAR(20),
ENDERECO VARCHAR(100) NULL,
CIDADE VARCHAR(50) DEFAULT 'Rio de Janeiro',
DATA_CRIACAO TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
PRIMARY KEY (ID));

INSERT INTO TAB_PADRAO (DESCRITOR, ENDERECO, CIDADE, DATA_CRIACAO)
VALUES ('CLIENTE X', 'Rua A', 'SÃO PAULO', '2019-01-01');

SELECT * FROM TAB_PADRAO;

INSERT INTO TAB_PADRAO (DESCRITOR) VALUES ('CLIENTE Y');

/*TRIGGER*/
CREATE TABLE TAB_FATURAMENTO
(DATA_VENDA DATE NULL,
TOTAL_VENDA FLOAT
);

SELECT * FROM TAB_FATURAMENTO;

INSERT INTO NOTAS(NUMERO, DATA, CPF, MATRICULA, IMPOSTO)
VALUES ('0100', '2019-05-08', '1471156710', '235', 0.10);
INSERT INTO ITENS_NOTAS(NUMERO, CODIGO, QUANTIDADE, PRECO)
VALUES ('0100', '1000889', 100, 10), ('0100', '1002334', 100, 10);

INSERT INTO NOTAS(NUMERO, DATA, CPF, MATRICULA, IMPOSTO)
VALUES ('0101', '2019-05-08', '1471156710', '235', 0.10);
INSERT INTO ITENS_NOTAS(NUMERO, CODIGO, QUANTIDADE, PRECO)
VALUES ('0101', '1000889', 100, 10), ('0101', '1002334', 100, 10);

SELECT * FROM VENDEDORES;
SELECT * FROM CLIENTES;
SELECT * FROM NOTAS;
SELECT * FROM ITENS_NOTAS;
SELECT * FROM PRODUTOS;

INSERT INTO TAB_FATURAMENTO(
SELECT N.DATA, SUM(QUANTIDADE * PRECO) AS TOTAL_FATURAMENTO
FROM NOTAS N 
INNER JOIN ITENS_NOTAS ITN
ON N.NUMERO = ITN.NUMERO);

SELECT * FROM TAB_FATURAMENTO;

DELIMITER //
CREATE TRIGGER TG_CALCULA_FATURAMENTO_INSERT AFTER INSERT ON ITENS_NOTAS
FOR EACH ROW 
BEGIN
	DELETE FROM TAB_FATURAMENTO;
	INSERT INTO TAB_FATURAMENTO(
	SELECT N.DATA, SUM(QUANTIDADE * PRECO) AS TOTAL_FATURAMENTO
	FROM NOTAS N 
	INNER JOIN ITENS_NOTAS ITN
	ON N.NUMERO = ITN.NUMERO);
END//

INSERT INTO NOTAS(NUMERO, DATA, CPF, MATRICULA, IMPOSTO)
VALUES ('0102', '2019-05-08', '1471156710', '235', 0.10);
INSERT INTO ITENS_NOTAS(NUMERO, CODIGO, QUANTIDADE, PRECO)
VALUES ('0102', '1000889', 100, 10), ('0102', '1002334', 100, 10);

INSERT INTO NOTAS(NUMERO, DATA, CPF, MATRICULA, IMPOSTO)
VALUES ('0104', '2019-05-08', '1471156710', '235', 0.10);
INSERT INTO ITENS_NOTAS(NUMERO, CODIGO, QUANTIDADE, PRECO)
VALUES ('0104', '1000889', 100, 10), ('0104', '1002334', 100, 10);//
-- O delimiter não para de executar comandos até encontrar outro //, ignorando os ";"

